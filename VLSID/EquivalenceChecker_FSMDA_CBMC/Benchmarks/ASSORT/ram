
Calling Parser....
File opening: ASSORT_org.txt


  "gen_assort_matrix.org" FSMD states and its transitions are displayed below  



 State name is  q00 

Status of VAPFLAG: False

   q00   to   -->q01

l  :=  0 + 1 * P0 
m  :=  0 + 1 * P1 
n  :=  0 + 1 * P2 
frac_low  :=  0 + 1 * P3 


 State name is  q01 

Status of VAPFLAG: False

   q01   to   -->q02

i  :=  0 
j  :=  0 
total  :=  1 
nl  :=  0 
nm  :=  0 


 State name is  q02 

Status of VAPFLAG: False

   q02   to   -->q03

sum_deg_l  :=  0 
sum_deg_m  :=  0 
total_edges  :=  0 


 State name is  q03 

Status of VAPFLAG: False

   q03   to   -->q04

i  :=  1 


 State name is  q04 

Status of VAPFLAG: False

   q04   to   -->q08
 ( -1 + 1 * i - 1 * m >= 0 ) 

   q04   to   -->q05
 ( -1 + 1 * i - 1 * m < 0 ) 
j  :=  1 


 State name is  q05 

Status of VAPFLAG: False

   q05   to   -->q07
 ( -1 + 1 * j - 1 * m >= 0 ) 

   q05   to   -->q06
 ( -1 + 1 * j - 1 * m < 0 ) 
assort_matrix  :=  write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )


 State name is  q08 

Status of VAPFLAG: False

   q08   to   -->q09

nl  :=  0 + 1 * n * frac_low 


 State name is  q06 

Status of VAPFLAG: False

   q06   to   -->q05

j  :=  1 + 1 * j 


 State name is  q07 

Status of VAPFLAG: False

   q07   to   -->q04

i  :=  1 + 1 * i 


 State name is  q09 

Status of VAPFLAG: False

   q09   to   -->q10

nm  :=  0 + 1 * n - 1 * nl 
sum_deg_l  :=  0 + 1 * l * nl 


 State name is  q10 

Status of VAPFLAG: False

   q10   to   -->q11

sum_deg_m  :=  0 + 1 * m * nm 


 State name is  q11 

Status of VAPFLAG: False

   q11   to   -->q12

total_edges  :=  0 + 1  * ( /   0 + 1 * sum_deg_l + 1 * sum_deg_m , 2 )


 State name is  q12 

Status of VAPFLAG: False

   q12   to   -->q20
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 

   q12   to   -->q13
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 


 State name is  q13 

Status of VAPFLAG: False

   q13   to   -->q14

temp  :=  0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )


 State name is  q20 

Status of VAPFLAG: False

   q20   to   -->q21

temp  :=  0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )


 State name is  q14 

Status of VAPFLAG: False

   q14   to   -->q15

assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1 * temp )


 State name is  q15 

Status of VAPFLAG: False

   q15   to   -->q30

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )- 2 * read ( assort_matrix, 0 + 1 * m , 0 + 1 * m ))
assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )- 2 * read ( assort_matrix, 0 + 1 * m , 0 + 1 * m ))
assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )+ 1 * read ( assort_matrix, 0 + 1 * m , 0 + 1 * m ))


 State name is  q30 

Status of VAPFLAG: False


 State name is  q21 

Status of VAPFLAG: False

   q21   to   -->q23

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1 * temp )


 State name is  q23 

Status of VAPFLAG: False

   q23   to   -->q30

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )- 2 * read ( assort_matrix, 0 + 1 * l , 0 + 1 * l ))
assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )- 2 * read ( assort_matrix, 0 + 1 * l , 0 + 1 * l ))
assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )+ 1 * read ( assort_matrix, 0 + 1 * l , 0 + 1 * l ))

Calling Parser....
File opening: ASSORT_schd.txt


  "gen_assort_matrix.schd" FSMD states and its transitions are displayed below  



 State name is  q00 

Status of VAPFLAG: False

   q00   to   -->q01

l  :=  0 + 1 * P0 
m  :=  0 + 1 * P1 
n  :=  0 + 1 * P2 
frac_low  :=  0 + 1 * P3 


 State name is  q01 

Status of VAPFLAG: False

   q01   to   -->q04

i  :=  1 
j  :=  0 
total  :=  1 
nl  :=  0 
nm  :=  0 
sum_deg_l  :=  0 
sum_deg_m  :=  0 
total_edges  :=  0 


 State name is  q04 

Status of VAPFLAG: False

   q04   to   -->q08
 ( -1 + 1 * i - 1 * m >= 0 ) 

   q04   to   -->q05
 ( -1 + 1 * i - 1 * m < 0 ) 
j  :=  1 


 State name is  q05 

Status of VAPFLAG: False

   q05   to   -->q07
 ( -1 + 1 * j - 1 * m >= 0 ) 

   q05   to   -->q06
 ( -1 + 1 * j - 1 * m < 0 ) 
assort_matrix  :=  write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )


 State name is  q08 

Status of VAPFLAG: False

   q08   to   -->q09

nl  :=  0 + 1 * n * frac_low 


 State name is  q06 

Status of VAPFLAG: False

   q06   to   -->q05

j  :=  1 + 1 * j 


 State name is  q07 

Status of VAPFLAG: False

   q07   to   -->q04

i  :=  1 + 1 * i 


 State name is  q09 

Status of VAPFLAG: False

   q09   to   -->q10

nm  :=  0 + 1 * n - 1 * nl 
sum_deg_l  :=  0 + 1 * l * nl 


 State name is  q10 

Status of VAPFLAG: False

   q10   to   -->q11

sum_deg_m  :=  0 + 1 * m * nm 


 State name is  q11 

Status of VAPFLAG: False

   q11   to   -->q12

total_edges  :=  0 + 1  * ( /   0 + 1 * sum_deg_l + 1 * sum_deg_m , 2 )


 State name is  q12 

Status of VAPFLAG: False

   q12   to   -->q30
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 

   q12   to   -->q13
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 


 State name is  q13 

Status of VAPFLAG: False

   q13   to   -->q14

sT1_1  :=  0 + 100 * sum_deg_m 


 State name is  q30 

Status of VAPFLAG: False

   q30   to   -->q31

sT2_1  :=  0 + 100 * sum_deg_l 


 State name is  q14 

Status of VAPFLAG: False

   q14   to   -->q15

sT1_2  :=  0 + 1  * ( /   0 + 1 * sT1_1 , 0 + 1 * total_edges )


 State name is  q15 

Status of VAPFLAG: False

   q15   to   -->q17

assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1 * sT1_2 , 200 ))


 State name is  q17 

Status of VAPFLAG: False

   q17   to   -->q18

sT1_3  :=  0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
sT1_4  :=  0 + 2 * read ( assort_matrix, 0 + 1 * m , 0 + 1 * m )


 State name is  q18 

Status of VAPFLAG: False

   q18   to   -->q19

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 + 1 * sT1_3 - 1 * sT1_4 )
assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 + 1 * sT1_3 - 1 * sT1_4 )


 State name is  q19 

Status of VAPFLAG: False

   q19   to   -->q20

sT1_5  :=  0 + 1 * sum_deg_l - 1 * sum_deg_m 
sT1_6  :=  0 + 2 * total_edges 


 State name is  q20 

Status of VAPFLAG: False

   q20   to   -->q21

sT1_7  :=  0 + 1  * ( /   0 + 1 * sT1_5 , 0 + 1 * sT1_6 )


 State name is  q21 

Status of VAPFLAG: False

   q21   to   -->q40

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1 * sT1_7 + 1 * read ( assort_matrix, 0 + 1 * m , 0 + 1 * m ))


 State name is  q40 

Status of VAPFLAG: False


 State name is  q31 

Status of VAPFLAG: False

   q31   to   -->q32

sT2_2  :=  0 + 1  * ( /   0 + 1 * sT2_1 , 0 + 1 * total_edges )


 State name is  q32 

Status of VAPFLAG: False

   q32   to   -->q34

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1 * sT2_2 , 200 ))


 State name is  q34 

Status of VAPFLAG: False

   q34   to   -->q35

sT2_3  :=  0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
sT2_4  :=  0 + 2 * read ( assort_matrix, 0 + 1 * l , 0 + 1 * l )
sT2_5  :=  0 - 1 * sum_deg_l + 1 * sum_deg_m 
sT2_6  :=  0 + 2 * total_edges 


 State name is  q35 

Status of VAPFLAG: False

   q35   to   -->q36

sT2_7  :=  0 + 1  * ( /   0 + 1 * sT2_5 , 0 + 1 * sT2_6 )


 State name is  q36 

Status of VAPFLAG: False

   q36   to   -->q40

assort_matrix  :=  write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 + 1 * sT2_3 - 1 * sT2_4 )
assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 + 1 * sT2_3 - 1 * sT2_4 )
assort_matrix  :=  write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1 * sT2_7 + 1 * read ( assort_matrix, 0 + 1 * l , 0 + 1 * l ))

 FSMDs read successfully 

 vars of : V0_V1  
 -
 -
 P0
 l
 P1
 m
 P2
 n
 P3
 frac_low
 0
 0
 i
 j
 1
 total
 nl
 nm
 sum_deg_l
 sum_deg_m
 total_edges
 assort_matrix
 2
 100
 200

 vars of : V1_minus_V0_V1 
 sT1_1 
 sT1_2 
 sT1_3 
 sT1_4 
 sT1_5 
 sT1_6 
 sT1_7 
 sT2_1 
 sT2_2 
 sT2_3 
 sT2_4 
 sT2_5 
 sT2_6 
 sT2_7 


Displaying all paths of M0



 Displaying all the paths of the path list 

  0  0 q00 --> 1 q01 --> 2 q02 --> 3 q03 --> 4 q04 



 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 


  1  4 q04 --> 6 q08 --> 9 q09 --> 10 q10 --> 11 q11 --> 12 q12 

 ( -1 + 1 * i - 1 * m >= 0 ) 

 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )


  2  4 q04 --> 5 q05 

 ( -1 + 1 * i - 1 * m < 0 ) 

 j := 1 


  3  5 q05 --> 8 q07 --> 4 q04 

 ( -1 + 1 * j - 1 * m >= 0 ) 

 i := 1 + 1 * i 


  4  5 q05 --> 7 q06 --> 5 q05 

 ( -1 + 1 * j - 1 * m < 0 ) 

 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 


  5  12 q12 --> 14 q20 --> 18 q21 --> 19 q23 --> 17 q30 

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 

 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))


  6  12 q12 --> 13 q13 --> 15 q14 --> 16 q15 --> 17 q30 

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 

 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))


In liveVariableAnalysis

In updateLivenessInfo

Out of updateLivenessInfo

In updateLivenessInfo

Out of updateLivenessInfo

In updateLivenessInfo

Out of updateLivenessInfo

In updateLivenessInfo

Out of updateLivenessInfo

Out of liveVariableAnalysis

Displaying the CFG along with Live Variable Analysis

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Use: P0  P1  P2  P3  
Def: l  m  n  frac_low  i  j  total  nl  nm  sum_deg_l  sum_deg_m  total_edges  
Live_s: P0  P1  P2  P3  
Live_f: m  i  n  frac_low  l  
-----

 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Use: m  i  n  frac_low  l  
Def: nl  nm  sum_deg_l  sum_deg_m  total_edges  
Live_s: m  i  n  frac_low  l  
Live_f: sum_deg_m  sum_deg_l  total_edges  l  m  
-----

 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Use: m  i  
Def: j  
Live_s: m  i  n  frac_low  l  
Live_f: m  j  i  n  frac_low  l  
-----

 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Use: m  j  i  
Def: i  
Live_s: m  j  i  n  frac_low  l  
Live_f: m  i  n  frac_low  l  
-----

 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Use: m  j  i  
Def: j  
Live_s: m  j  i  n  frac_low  l  
Live_f: m  j  i  n  frac_low  l  
-----

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Use: sum_deg_m  sum_deg_l  total_edges  l  m  
Def: temp  
Live_s: sum_deg_m  sum_deg_l  total_edges  l  m  
Live_f: 
-----

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Use: sum_deg_m  sum_deg_l  total_edges  m  l  
Def: temp  
Live_s: sum_deg_m  sum_deg_l  total_edges  m  l  
Live_f: 
-----



Displaying all paths of M1



 Displaying all the paths of the path list 

  0  0 q00 --> 1 q01 --> 2 q04 



 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 


  1  2 q04 --> 4 q08 --> 7 q09 --> 8 q10 --> 9 q11 --> 10 q12 

 ( -1 + 1 * i - 1 * m >= 0 ) 

 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )


  2  2 q04 --> 3 q05 

 ( -1 + 1 * i - 1 * m < 0 ) 

 j := 1 


  3  3 q05 --> 6 q07 --> 2 q04 

 ( -1 + 1 * j - 1 * m >= 0 ) 

 i := 1 + 1 * i 


  4  3 q05 --> 5 q06 --> 3 q05 

 ( -1 + 1 * j - 1 * m < 0 ) 

 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 


  5  10 q12 --> 12 q30 --> 21 q31 --> 22 q32 --> 23 q34 --> 24 q35 --> 25 q36 --> 20 q40 

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 

 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )


  6  10 q12 --> 11 q13 --> 13 q14 --> 14 q15 --> 15 q17 --> 16 q18 --> 17 q19 --> 18 q20 --> 19 q21 --> 20 q40 

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 

 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )


In liveVariableAnalysis

In updateLivenessInfo

Out of updateLivenessInfo

In updateLivenessInfo

Out of updateLivenessInfo

In updateLivenessInfo

Out of updateLivenessInfo

In updateLivenessInfo

Out of updateLivenessInfo

Out of liveVariableAnalysis

Displaying the CFG along with Live Variable Analysis

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Use: P0  P1  P2  P3  
Def: l  m  n  frac_low  i  j  total  nl  nm  sum_deg_l  sum_deg_m  total_edges  
Live_s: P0  P1  P2  P3  
Live_f: m  i  n  frac_low  l  
-----

 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Use: m  i  n  frac_low  l  
Def: nl  nm  sum_deg_l  sum_deg_m  total_edges  
Live_s: m  i  n  frac_low  l  
Live_f: sum_deg_m  sum_deg_l  total_edges  l  m  
-----

 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Use: m  i  
Def: j  
Live_s: m  i  n  frac_low  l  
Live_f: m  j  i  n  frac_low  l  
-----

 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Use: m  j  i  
Def: i  
Live_s: m  j  i  n  frac_low  l  
Live_f: m  i  n  frac_low  l  
-----

 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Use: m  j  i  
Def: j  
Live_s: m  j  i  n  frac_low  l  
Live_f: m  j  i  n  frac_low  l  
-----

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Use: sum_deg_m  sum_deg_l  total_edges  l  m  
Def: sT2_1  sT2_2  sT2_3  sT2_4  sT2_5  sT2_6  sT2_7  
Live_s: sum_deg_m  sum_deg_l  total_edges  l  m  
Live_f: 
-----

 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Use: sum_deg_m  sum_deg_l  total_edges  m  l  
Def: sT1_1  sT1_2  sT1_3  sT1_4  sT1_5  sT1_6  sT1_7  
Live_s: sum_deg_m  sum_deg_l  total_edges  m  l  
Live_f: 
-----

Symbol 0: 	 - 	 0
Symbol 1: 	 l 	 60
Symbol 2: 	 P0 	 320
Symbol 3: 	 m 	 61
Symbol 4: 	 P1 	 321
Symbol 5: 	 n 	 62
Symbol 6: 	 P2 	 322
Symbol 7: 	 frac_low 	 611463701
Symbol 8: 	 P3 	 323
Symbol 9: 	 i 	 57
Symbol 10: 	 j 	 58
Symbol 11: 	 total 	 750350
Symbol 12: 	 nl 	 680
Symbol 13: 	 nm 	 681
Symbol 14: 	 sum_deg_l 	 -1133655562
Symbol 15: 	 sum_deg_m 	 -1133655561
Symbol 16: 	 total_edges 	 -1263988703
Symbol 17: 	 assort_matrix 	 168428506
Symbol 18: 	 temp 	 73974
Symbol 19: 	 sT1_1 	 706571
Symbol 20: 	 sT1_2 	 706572
Symbol 21: 	 sT1_3 	 706573
Symbol 22: 	 sT1_4 	 706574
Symbol 23: 	 sT1_5 	 706575
Symbol 24: 	 sT1_6 	 706576
Symbol 25: 	 sT1_7 	 706577
Symbol 26: 	 sT2_1 	 706671
Symbol 27: 	 sT2_2 	 706672
Symbol 28: 	 sT2_3 	 706673
Symbol 29: 	 sT2_4 	 706674
Symbol 30: 	 sT2_5 	 706675
Symbol 31: 	 sT2_6 	 706676
Symbol 32: 	 sT2_7 	 706677


Through Queue: 0

 In correspondenceChecker( q00, q00 )
Checking condition for path with index 0

 In createDummyPath()

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition:
 In compatibleConditions() with arguments
 First Condition:
 Second Condition:
 In correspondenceChecker( q00, q00 ) with path_id: 0

 In findEquivalentPath(.., .., q00, ..)

Beta:
 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition:
 In compatibleConditions() with arguments
 First Condition:
 Second Condition:
 In compatibleConditions() with arguments
 First Condition:
 Second Condition:
 Comparing beta with path alpha with id: 0

 In createDummyPath()

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition:
 Result of checkCondition(): 1

 In valuePropagation()

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

 In createDummyPath()

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
 End of displaying concatenated path

 In createDummyPath()

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
 End of displaying concatenated path
Modified paths
Path beta'

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Path alpha'

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
 Vectors to be propagated

Propagated Vector
 Condition: 
	 True

Propagated Vector
 Condition: 
	 True

 Out of countMismatch, #mismatches = 0

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 0, indexOfP1: 0
 Beta path:
q00 --> q01 --> q02 --> q03 --> q04

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True


 Alpha path:
q00 --> q01 --> q04

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q04, q04 ) in eta


 Out of already_present_queue with return value FALSE

 Updating E_c

 Out of correspondenceChecker( q00, q00 ) with return value 1


Through Queue: 0

 In correspondenceChecker( q04, q04 )
Checking condition for path with index 1

 In createDummyPath()
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 In correspondenceChecker( q04, q04 ) with path_id: 1

 In findEquivalentPath(.., .., q04, ..)

Beta: ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Second Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Out of compatibleConditions() with return value 1

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Comparing beta with path alpha with id: 1

 In createDummyPath()
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Second Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Out of compatibleConditions() with return value 1

 Result of checkCondition(): 1

 In valuePropagation()
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
 End of displaying concatenated path

 In createDummyPath()
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
 End of displaying concatenated path
Modified paths
Path beta'
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Path alpha'
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
 Vectors to be propagated

Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m >= 0 ) 
Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m >= 0 ) 
 Out of countMismatch, #mismatches = 0

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 1, indexOfP1: 1
 Beta path:
q04 --> q08 --> q09 --> q10 --> q11 --> q12
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m >= 0 ) 

 Alpha path:
q04 --> q08 --> q09 --> q10 --> q11 --> q12
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m >= 0 ) 
Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q12, q12 ) in eta


 Out of already_present_queue with return value FALSE

 Updating E_c
Checking condition for path with index 2

 In createDummyPath()
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 In correspondenceChecker( q04, q04 ) with path_id: 2

 In findEquivalentPath(.., .., q04, ..)

Beta: ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m >= 0 ) 
 Second Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Out of compatibleConditions() with return value 0

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Second Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Out of compatibleConditions() with return value 1

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Comparing beta with path alpha with id: 2

 In createDummyPath()
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Second Condition: ( -1 + 1 * i - 1 * m < 0 ) 
 Out of compatibleConditions() with return value 1

 Result of checkCondition(): 1

 In valuePropagation()
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
 End of displaying concatenated path

 In createDummyPath()
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
 End of displaying concatenated path
Modified paths
Path beta'
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Path alpha'
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
 Vectors to be propagated

Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m < 0 ) 
Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m < 0 ) 
 Out of countMismatch, #mismatches = 0

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 2, indexOfP1: 2
 Beta path:
q04 --> q05
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m < 0 ) 

 Alpha path:
q04 --> q05
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
 ( -1 + 1 * i - 1 * m < 0 ) 
Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q05, q05 ) in eta


 Out of already_present_queue with return value FALSE

 Updating E_c

 Out of correspondenceChecker( q04, q04 ) with return value 1


Through Queue: 0

 In correspondenceChecker( q12, q12 )
Checking condition for path with index 5

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 In correspondenceChecker( q12, q12 ) with path_id: 5

 In findEquivalentPath(.., .., q12, ..)

Beta: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Out of compatibleConditions() with return value 1

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Comparing beta with path alpha with id: 5

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Out of compatibleConditions() with return value 1

 Result of checkCondition(): 1

 In valuePropagation()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 End of displaying concatenated path

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
 End of displaying concatenated path
Modified paths
Path beta'
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Path alpha'
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )occurs in beta only

sT2_1 := 0 + 100 * sum_deg_l occurs in alpha only

sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )occurs in alpha only

sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )occurs in alpha only

sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )occurs in alpha only

sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m occurs in alpha only

sT2_6 := 0 + 2 * total_edges occurs in alpha only

sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )occurs in alpha only

 Vectors to be propagated

Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
 Out of countMismatch, #mismatches = 8

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 5, indexOfP1: 5
 Beta path:
q12 --> q20 --> q21 --> q23 --> q30
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )

 Alpha path:
q12 --> q30 --> q31 --> q32 --> q34 --> q35 --> q36 --> q40
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Mismatch found for uncommon variable: temp

Mismatch found for uncommon variable: sT2_1

Mismatch found for uncommon variable: sT2_2

Mismatch found for uncommon variable: sT2_3

Mismatch found for uncommon variable: sT2_4

Mismatch found for uncommon variable: sT2_5

Mismatch found for uncommon variable: sT2_6

Mismatch found for uncommon variable: sT2_7

Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q30, q40 ) in eta


 Out of already_present_queue with return value FALSE

 Updating E_c
Checking condition for path with index 6

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 In correspondenceChecker( q12, q12 ) with path_id: 6

 In findEquivalentPath(.., .., q12, ..)

Beta: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Out of compatibleConditions() with return value 0

 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Out of compatibleConditions() with return value 1

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Comparing beta with path alpha with id: 6

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Second Condition: ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 Out of compatibleConditions() with return value 1

 Result of checkCondition(): 1

 In valuePropagation()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 End of displaying concatenated path

 In createDummyPath()
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
 End of displaying concatenated path
Modified paths
Path beta'
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Path alpha'
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )occurs in beta only

sT1_1 := 0 + 100 * sum_deg_m occurs in alpha only

sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )occurs in alpha only

sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )occurs in alpha only

sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )occurs in alpha only

sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m occurs in alpha only

sT1_6 := 0 + 2 * total_edges occurs in alpha only

sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )occurs in alpha only

 Vectors to be propagated

Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
 Out of countMismatch, #mismatches = 8

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 6, indexOfP1: 6
 Beta path:
q12 --> q13 --> q14 --> q15 --> q30
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )

 Alpha path:
q12 --> q13 --> q14 --> q15 --> q17 --> q18 --> q19 --> q20 --> q21 --> q40
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Mismatch found for uncommon variable: temp

Mismatch found for uncommon variable: sT1_1

Mismatch found for uncommon variable: sT1_2

Mismatch found for uncommon variable: sT1_3

Mismatch found for uncommon variable: sT1_4

Mismatch found for uncommon variable: sT1_5

Mismatch found for uncommon variable: sT1_6

Mismatch found for uncommon variable: sT1_7

Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q30, q40 ) in eta


 Out of already_present_queue with return value TRUE because match is found for entry number: 4

 Updating E_c

 Out of correspondenceChecker( q12, q12 ) with return value 1


Through Queue: 0

 In correspondenceChecker( q05, q05 )
Checking condition for path with index 3

 In createDummyPath()
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 In correspondenceChecker( q05, q05 ) with path_id: 3

 In findEquivalentPath(.., .., q05, ..)

Beta: ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Second Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Out of compatibleConditions() with return value 1

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Comparing beta with path alpha with id: 3

 In createDummyPath()
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Second Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Out of compatibleConditions() with return value 1

 Result of checkCondition(): 1

 In valuePropagation()
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
 End of displaying concatenated path

 In createDummyPath()
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
 End of displaying concatenated path
Modified paths
Path beta'
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Path alpha'
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
 Vectors to be propagated

Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m >= 0 ) 
Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m >= 0 ) 
 Out of countMismatch, #mismatches = 0

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 3, indexOfP1: 3
 Beta path:
q05 --> q07 --> q04
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m >= 0 ) 

 Alpha path:
q05 --> q07 --> q04
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m >= 0 ) 
Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q04, q04 ) in eta


 Out of already_present_queue with return value TRUE because match is found for entry number: 1

 Updating E_c
Checking condition for path with index 4

 In createDummyPath()
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 In correspondenceChecker( q05, q05 ) with path_id: 4

 In findEquivalentPath(.., .., q05, ..)

Beta: ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
PV_Beta:
Propagated Vector
 Condition: 
	 True

PV_Alpha:
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m >= 0 ) 
 Second Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Out of compatibleConditions() with return value 0

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Second Condition:
 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Second Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Out of compatibleConditions() with return value 1

 In compatibleConditions() with arguments
 First Condition:
 Second Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Comparing beta with path alpha with id: 4

 In createDummyPath()
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
 End of displaying concatenated path

 In compatibleConditions() with arguments
 First Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Second Condition: ( -1 + 1 * j - 1 * m < 0 ) 
 Out of compatibleConditions() with return value 1

 Result of checkCondition(): 1

 In valuePropagation()
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

 In createDummyPath()
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
 End of displaying concatenated path

 In createDummyPath()
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

WARNING: In createDummyNode() with NULL expression

 Displaying the dummy path created

 End of displaying the dummy path created

 Displaying concatenated path
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
 End of displaying concatenated path
Modified paths
Path beta'
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Path alpha'
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
 Vectors to be propagated

Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m < 0 ) 
Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m < 0 ) 
 Out of countMismatch, #mismatches = 0

 Back from findEquivalentPath() to correspondenceChecker()
 indexOfP0: 4, indexOfP1: 4
 Beta path:
q05 --> q06 --> q05
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m < 0 ) 

 Alpha path:
q05 --> q06 --> q05
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
 ( -1 + 1 * j - 1 * m < 0 ) 
Out of equivalentPropagatedVector() with TRUE indicating Case 1.1

 Updating E_u
Enqueueing ( q05, q05 ) in eta


 Out of already_present_queue with return value TRUE because match is found for entry number: 3

 Updating E_c

 Out of correspondenceChecker( q05, q05 ) with return value 1


Through Queue: 0

 In correspondenceChecker( q30, q40 )

 Out of correspondenceChecker( q30, q40 ) with return value 1




###################### Verification Report #######################


 M0 ("gen_assort_matrix.org") and M1 ("gen_assort_matrix.schd") are equivalent.

 No. of states in M0: 20, and No. of states in M1: 26

 No. of paths in the path cover of M0: 7, and No. of paths in the path cover of M1: 7

 No. of null paths in the path cover of M0: 0, and No. of null paths in the path cover of M1: 0

 Maximum depth of recursion: 0

 Maximum mismatch between two value vectors: 8

 List of corresponding states: 
	1. ( q00, q00 )	#visited: 1	2. ( q04, q04 )	#visited: 2	3. ( q12, q12 )	#visited: 1	4. ( q05, q05 )	#visited: 2	5. ( q30, q40 )	#visited: 2

 List of C-corresponding states: 



 List of unconditionally equivalent (U-equivalent) paths: 


1)
Path of M0:
q00 --> q01 --> q02 --> q03 --> q04

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q00 --> q01 --> q04

 l := 0 + 1 * P0 
 m := 0 + 1 * P1 
 n := 0 + 1 * P2 
 frac_low := 0 + 1 * P3 
 i := 1 
 j := 0 
 total := 1 
 nl := 0 
 nm := 0 
 sum_deg_l := 0 
 sum_deg_m := 0 
 total_edges := 0 
Propagated Vector
 Condition: 
	 True


2)
Path of M0:
q04 --> q08 --> q09 --> q10 --> q11 --> q12
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q04 --> q08 --> q09 --> q10 --> q11 --> q12
 ( -1 + 1 * i - 1 * m >= 0 ) 
 nl := 0 + 1 * n * frac_low 
 nm := 0 + 1 * n - 1 * n * frac_low 
 sum_deg_l := 0 + 1 * l * n * frac_low 
 sum_deg_m := 0 + 1 * m * n - 1 * m * n * frac_low 
 total_edges := 0 + 1  * ( /   0 + 1 * l * n * frac_low + 1 * m * n - 1 * m * n * frac_low , 2 )
Propagated Vector
 Condition: 
	 True


3)
Path of M0:
q04 --> q05
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q04 --> q05
 ( -1 + 1 * i - 1 * m < 0 ) 
 j := 1 
Propagated Vector
 Condition: 
	 True


4)
Path of M0:
q12 --> q20 --> q21 --> q23 --> q30
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q12 --> q30 --> q31 --> q32 --> q34 --> q35 --> q36 --> q40
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m <= 0 ) 
 sT2_1 := 0 + 100 * sum_deg_l 
 sT2_2 := 0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges ))
 sT2_3 := 0 + 1  * ( /   0 + 1 * sum_deg_l , 0 + 1 * total_edges )
 sT2_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_l , 0 + 1 * total_edges ), 200 )
 sT2_5 := 0 - 1 * sum_deg_l + 1 * sum_deg_m 
 sT2_6 := 0 + 2 * total_edges 
 sT2_7 := 0 + 1  * ( /   0 - 1 * sum_deg_l + 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True


5)
Path of M0:
q12 --> q13 --> q14 --> q15 --> q30
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 temp := 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q12 --> q13 --> q14 --> q15 --> q17 --> q18 --> q19 --> q20 --> q21 --> q40
 ( 0 + 1 * sum_deg_l - 1 * sum_deg_m > 0 ) 
 sT1_1 := 0 + 100 * sum_deg_m 
 sT1_2 := 0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges )
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * m ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * l ), 0 + 1  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * m , 0 + 1 * l ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 assort_matrix := write ( assort_matrix, 0 + 1 * l , 0 + 1 * m ), 0 - 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )+ 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges ))
 sT1_3 := 0 + 1  * ( /   0 + 1 * sum_deg_m , 0 + 1 * total_edges )
 sT1_4 := 0 + 2  * ( /   0 + 1  * ( /   0 + 100 * sum_deg_m , 0 + 1 * total_edges ), 200 )
 sT1_5 := 0 + 1 * sum_deg_l - 1 * sum_deg_m 
 sT1_6 := 0 + 2 * total_edges 
 sT1_7 := 0 + 1  * ( /   0 + 1 * sum_deg_l - 1 * sum_deg_m , 0 + 2 * total_edges )
Propagated Vector
 Condition: 
	 True


6)
Path of M0:
q05 --> q07 --> q04
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q05 --> q07 --> q04
 ( -1 + 1 * j - 1 * m >= 0 ) 
 i := 1 + 1 * i 
Propagated Vector
 Condition: 
	 True


7)
Path of M0:
q05 --> q06 --> q05
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True

	 is equivalent to
Path of M1:
q05 --> q06 --> q05
 ( -1 + 1 * j - 1 * m < 0 ) 
 assort_matrix := write ( assort_matrix, 0 + 1 * i , 0 + 1 * j ), 0 )
 j := 1 + 1 * j 
Propagated Vector
 Condition: 
	 True


 List of conditionally equivalent (C-equivalent) paths: 


 Approximate number of code motions: 0

Number of times correspondenceChecker called:5
Number of times findEquivalentPath (valuePropagation) called:7
Number of times loopInvariant called:0

 User CPU time used: 0 sec and 16000 microsecs

 System CPU time used: 0 sec and 80000 microsecs


####################################################################

